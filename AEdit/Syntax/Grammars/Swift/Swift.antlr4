// Excerpts from https://github.com/antlr/grammars-v4/blob/master/swift/swift3/Swift3.g4
// antlr4 -no-listener -Dlanguage=Swift Swift/Swift.antlr4
// expect warning(131): Swift/Swift.antlr4:89:53: greedy block ()* contains wildcard; the non-greedy syntax ()*? may be preferred

grammar Swift;

Identifier: IdentifierFirst IdentifierMore*
    | '`' IdentifierFirst IdentifierMore* '`'
    | '$' [0-9]+ ;
fragment IdentifierFirst: [a-zA-Z]
    | '_'
    | '\u00A8' | '\u00AA' | '\u00AD' | '\u00AF' | [\u00B2-\u00B5] | [\u00B7-\u00BA]
    | [\u00BC-\u00BE] | [\u00C0-\u00D6] | [\u00D8-\u00F6] | [\u00F8-\u00FF]
    | [\u0100-\u02FF] | [\u0370-\u167F] | [\u1681-\u180D] | [\u180F-\u1DBF]
    | [\u1E00-\u1FFF]
    | [\u200B-\u200D] | [\u202A-\u202E] | [\u203F-\u2040] | '\u2054' | [\u2060-\u206F]
    | [\u2070-\u20CF] | [\u2100-\u218F] | [\u2460-\u24FF] | [\u2776-\u2793]
    | [\u2C00-\u2DFF] | [\u2E80-\u2FFF]
    | [\u3004-\u3007] | [\u3021-\u302F] | [\u3031-\u303F] | [\u3040-\uD7FF]
    | [\uF900-\uFD3D] | [\uFD40-\uFDCF] | [\uFDF0-\uFE1F] | [\uFE30-\uFE44]
    | [\uFE47-\uFFFD] ;
fragment IdentifierMore: [0-9]
    | [\u0300-\u036F] | [\u1DC0-\u1DFF] | [\u20D0-\u20FF] | [\uFE20-\uFE2F]
    | IdentifierFirst ;

Literal
    :   '0b' BinaryDigit BinaryMore*
    |   '0o' OctalDigit OctalMore*
    |   '0x' HexadecimalDigit HexadecimalMore*
    |   DecimalDigit DecimalMore* ('.' DecimalDigit DecimalMore*)? ([eE] [+-]? DecimalDigit DecimalMore*)?
    |   HexadecimalDigit HexadecimalMore* ('.' HexadecimalDigit HexadecimalMore*)? [pP] [+-]? DecimalDigit DecimalMore*
    |   '"' StringItem* '"'
    |   'true' | 'false'
    |   'nil'
    ;
fragment BinaryDigit: [01] ;
fragment BinaryMore: BinaryDigit | '_' ;
fragment OctalDigit: [0-7] ;
fragment OctalMore: OctalDigit | '_' ;
fragment DecimalDigit: [0-9] ;
fragment DecimalMore: DecimalDigit | '_' ;
fragment HexadecimalDigit: [0-9a-fA-F] ;
fragment HexadecimalMore: HexadecimalDigit | '_' ;
fragment StringItem: ~["\n\r\\]
    |   '\\' [0\\tnr"']
    |   '\\x' HexadecimalDigit HexadecimalDigit
    |   '\\u' '{' HexadecimalDigit HexadecimalDigit HexadecimalDigit HexadecimalDigit '}'
    |   '\\u' '{' HexadecimalDigit HexadecimalDigit HexadecimalDigit HexadecimalDigit HexadecimalDigit HexadecimalDigit HexadecimalDigit HexadecimalDigit '}'
    |   '\\(' ('"' StringItem* '"' | StringItem)+ ')'
    ;

Operator:   OperatorHead OperatorMore* ;
fragment OperatorHead
  : ('/' | '=' | '-' | '+' | '!' | '*' | '%' | '&' | '|' | '<' | '>' | '^' | '~' | '?')
  | [\u00A1-\u00A7]
  | [\u00A9\u00AB]
  | [\u00AC\u00AE]
  | [\u00B0-\u00B1\u00B6\u00BB\u00BF\u00D7\u00F7]
  | [\u2016-\u2017\u2020-\u2027]
  | [\u2030-\u203E]
  | [\u2041-\u2053]
  | [\u2055-\u205E]
  | [\u2190-\u23FF]
  | [\u2500-\u2775]
  | [\u2794-\u2BFF]
  | [\u2E00-\u2E7F]
  | [\u3001-\u3003]
  | [\u3008-\u3030]
  ;
fragment OperatorMore
  : [\u0300-\u036F]
  | [\u1DC0-\u1DFF]
  | [\u20D0-\u20FF]
  | [\uFE00-\uFE0F]
  | [\uFE20-\uFE2F]
  //| [\uE0100-\uE01EF]  ANTLR can't do >16bit char
  ;

Whitespace: [ \t\u000B\u000C\u0000]+ -> skip ;
Newline: ('\r\n' | '\n') ;

Comment: BlockComment
    | '//' ~[\r\n]* ;
fragment BlockComment: '/*' (BlockComment|.)*? '*/' ;

OTHER: . ;

highlightScan
    : (keyword|typename|identifier|literal|comment|.)* EOF ;
// keywords can't be defined in the lexer if they are also used as quoted strings in parser rules
// since all have to fall into one highlight name, the parser rule lists them all
keyword:   'for'|'case'|'while'|'in'|'let'|'var'|'repeat'|'if'|'else'|'guard'
    |'switch'|'default'|'where'|'break'|'continue'|'throw'|'return'|'defer'|'do'|'catch'
    |'typealias'|'struct'|'class'|'enum'|'protocol'|'import'|'func'|'extension';
typename:  'convenience'
 | 'dynamic'
 | 'final'
 | 'infix'
 | 'lazy'
 | 'optional'
 | 'override'
 | 'postfix'
 | 'prefix'
 | 'required'
 | 'static'
 | 'unowned'
 | 'unowned' '(' 'safe' ')'
 | 'unowned' '(' 'unsafe' ')'
 | 'weak'
 | 'private' | 'private' '(' 'set' ')'
 | 'fileprivate' | 'fileprivate' '(' 'set' ')'
 | 'internal' | 'internal' '(' 'set' ')'
 | 'public' | 'public' '(' 'set' ')'
 | 'open' | 'open' '(' 'set' ')'
 | 'mutating' | 'nonmutating'
 | '@IBOutlet' | '@IBAction'
;
operator_:   ';'|','|'.'|':'
    |'::'|'@'|'...'
    | Operator;
    
identifier: Identifier ;
literal: Literal ;
//TODO preprocessor:
comment: Comment ;

definitionScan
    : (definition|balanced)* EOF ;

definition
    :   'class' defined (':' balanced+)? '{' (definition|balanced)* '}'
    |   'struct' defined (':' balanced+)? balanced
    |   'enum' defined balanced
    |   'func' defined /*TODO generic*/ '(' balanced* ')' Newline? '{' balanced* '}'
    |   'protocol' defined (':' balanced+)? balanced
    |   'extension' defined (':' balanced+)? '{' (definition|balanced)* '}'
    |   'typealias' defined
    ;
defined: Identifier ;
  
balanced
    :   '(' balanced* ')'
    |   '[' balanced* ']'
    |   '{' balanced* '}'
    |   ~(')'|']'|'}')
    ;
